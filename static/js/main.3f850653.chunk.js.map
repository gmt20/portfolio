{"version":3,"sources":["Home.js","Projects.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","Projects","Contact","href","App","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAceA,E,uKAVX,OACE,gEACE,qCADF,mCAEE,0EAFF,qC,GAHaC,aCsCJC,E,uKApCX,OACE,6BACE,qDACA,sGACA,4BACE,uDACA,wDACA,kDACA,yDAGF,wDACA,0GACA,4BACE,sEACA,8DACA,8EACA,2CACA,oDAGF,2DACA,0GACA,4BACE,4EACA,oDACA,4CACA,4CACA,uD,GA9BaD,aCYRE,E,uKAVX,OACE,6BACE,8CACA,sEAA2C,uBAAGC,KAAK,4BAAR,qBAA3C,U,GALcH,aCuCPI,MA5Bf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKC,UAAU,OACb,yBAAKA,UAAY,IACf,0CACA,6BACA,wBAAIA,UAAU,UACd,4BAAI,kBAAC,IAAD,CAASC,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,aAAZ,aACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,cAGJ,yBAAKD,UAAU,WAEd,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWP,SClBvBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f850653.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n \nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>HELLO</h2>\n        <p>My name is Megha. I am a Computer Engineer.</p>\n \n      </div>\n    );\n  }\n}\n \nexport default Home;","import React, { Component } from \"react\";\n \nclass Projects extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Data Science projects</h2>\n        <p>Here is the list of some of the data science projects that I have done:</p>\n        <ol>\n          <li>Stack Overflow Chat Bot</li>\n          <li>Image Captioning Porject</li>\n          <li>Text Classifiation</li>\n          <li>Named Entity Recognition</li>\n          \n        </ol>\n        <h2>Web development projects</h2>\n        <p>Here is the list of some of the web developments projects that I have done:</p>\n        <ol>\n          <li>Project Tracker App in pure Javascript</li>\n          <li>Portfolio Web app in Reacts js</li>\n          <li>Save and define chrome extension in Javascript</li>\n          <li>Node js App</li>\n          <li>Full MERN Stack app</li>\n                    \n        </ol>\n        <h2> Basic development projects</h2>\n        <p>Here is the list of some of the web developments projects that I have done:</p>\n        <ol>\n          <li>Web Scrapping in Python using beautiful soap</li>\n          <li>Interpreter/Compiler</li>\n          <li>Chess Engine</li>\n          <li>Micro kernel</li>\n          <li>HTTP Proxy Server</li>\n                    \n        </ol>\n      </div>\n    );\n  }\n}\n \nexport default Projects;","import React, { Component } from \"react\";\n \nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        <h2>GOT QUESTIONS?</h2>\n        <p>The easiest thing to do is to email at  <a href=\"mailto:gmtcs20@gmail.com\">gmtcs20@gmail.com</a>.\n        </p>\n      </div>\n    );\n  }\n}\n \nexport default Contact;","import React from 'react';\n\nimport './App.css';\nimport {\n \n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Projects from \"./Projects\";\nimport Contact from \"./Contact\";\n\nfunction App() {\n  return (\n    <HashRouter>\n    <div className=\"App\">\n      <div className = \"\">\n        <h1>Simple SPA</h1>\n        <nav>\n        <ul className=\"header\">\n        <li><NavLink to=\"/\">Home</NavLink></li>\n        <li><NavLink to=\"/Projects\">Projects</NavLink></li>\n        <li><NavLink to=\"/Contact\">Contact</NavLink></li>\n        </ul>\n        </nav>\n        <div className=\"content\">\n          \n         <Route exact path=\"/\" component={Home}/>\n         <Route path=\"/Projects\" component={Projects}/>\n         <Route path=\"/Contact\" component={Contact}/>\n         \n        </div>\n      </div>\n  \n      \n    </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}